package tool;

import java.io.IOException;
import java.io.PrintWriter;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.List;
import java.util.Locale;

public class GenerateAst {
    public static void main(String[] args) throws IOException {
        if (args.length != 1) {
            System.err.println("Usage: generate_ast <output directory>");
            System.exit(64);
        }
        String outputDir = args[0];
        defineAst(outputDir, "Expr", Arrays.asList(
                "Binary : Expr left, Token operator, Expr right",
                "Grouping : Expr expression",
                "Literal : Object value",
                "Unary : Token operator, Expr right"
        ));
    }

    private static void defineAst(String outputDir, String baseName, List<String> types)
            throws IOException {
        String path = outputDir + "/" + baseName + ".java";
        try (PrintWriter writer = new PrintWriter(path, StandardCharsets.UTF_8)) {
            writer.println("package lox;");
            writer.println();
            writer.println("import java.util.List;");
            writer.println();
            writer.println("/**");
            writer.println(" * Auto generated by {@code GenerateAst.java}");
            writer.println(" **/");
            writer.println("abstract class " + baseName + " {");

            writer.println();
            defineVisitor(writer, baseName, types);

            writer.println();
            println(writer, 4, "abstract <R> R accept(Visitor<R> visitor);");

            for (String type : types) {
                String[] split = type.split(":");
                String className = split[0].trim();
                String fields = split[1].trim();
                writer.println();
                defineType(writer, baseName, className, fields);
            }

            writer.println("}");
        }
    }

    private static void defineVisitor(PrintWriter writer, String baseName, List<String> types) {
        println(writer, 4, "interface Visitor<R> {");

        for (String type : types) {
            String typeName = type.split(" ")[0].trim();
            println(writer, 8, "R visit" + typeName + baseName
                    + "(" + typeName + " " + baseName.toLowerCase(Locale.ROOT) + ");");
        }

        println(writer, 4, "}");
    }

    private static void defineType(PrintWriter writer, String baseName, String className, String fields) {
        println(writer, 4, "static class " + className + " extends " + baseName + " {");

        // Declare fields.
        for (String field : fields.split(",")) {
            field = field.trim();
            println(writer, 8, "final " + field + ";");
        }

        writer.println();

        // Constructor.
        println(writer, 8, className + "(" + fields + ") {");

        // Store parameters in fields.
        for (String field : fields.split(",")) {
            String name = field.trim().split(" ")[1];
            println(writer, 12, "this." + name + " = " + name + ";");
        }

        println(writer, 8, "}");

        // Visitor pattern.
        writer.println();
        println(writer, 8, "@Override");
        println(writer, 8, "<R> R accept(Visitor<R> visitor) {");
        println(writer, 12, "return visitor.visit" + className + baseName + "(this);");
        println(writer, 8, "}");

        println(writer, 4, "}");
    }

    private static void println(PrintWriter writer, int indent, String line) {
        String str = " ".repeat(Math.max(0, indent)) + line;
        writer.println(str);
    }
}
